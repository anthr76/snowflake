From d2900d5623517cfeae951e07138c0710e9a51493 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Wed, 20 Mar 2024 17:46:36 +0000
Subject: [PATCH 1/2] wlserver: Update to wlroots 0.18

---
 src/meson.build  |  2 +-
 src/wlserver.cpp | 45 +++++++++++++++++++++++++++------------------
 src/wlserver.hpp |  4 +++-
 3 files changed, 31 insertions(+), 20 deletions(-)

diff --git a/src/meson.build b/src/meson.build
index 40de02ccc..90239562c 100644
--- a/src/meson.build
+++ b/src/meson.build
@@ -25,7 +25,7 @@ avif_dep = dependency('libavif', version: '>=1.0.0', required: get_option('avif_

 wlroots_dep = dependency(
   'wlroots',
-  version: ['>= 0.17.0', '< 0.18.0'],
+  version: ['>= 0.18.0', '< 0.19.0'],
   fallback: ['wlroots', 'wlroots'],
   default_options: ['default_library=static', 'examples=false', 'xwayland=enabled', 'backends=libinput', 'renderers=[]', 'allocators=[]', 'session=enabled'],
 )
diff --git a/src/wlserver.cpp b/src/wlserver.cpp
index 954452d53..f932a792f 100644
--- a/src/wlserver.cpp
+++ b/src/wlserver.cpp
@@ -305,7 +305,7 @@ static void wlserver_handle_pointer_axis(struct wl_listener *listener, void *dat
 	struct wlserver_pointer *pointer = wl_container_of( listener, pointer, axis );
 	struct wlr_pointer_axis_event *event = (struct wlr_pointer_axis_event *) data;

-	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, event->time_msec, event->orientation, event->delta, event->delta_discrete, event->source );
+	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, event->time_msec, event->orientation, event->delta, event->delta_discrete, event->source, event->relative_direction );
 }

 static void wlserver_handle_pointer_frame(struct wl_listener *listener, void *data)
@@ -613,6 +613,11 @@ struct wlr_output *gamescope_xwayland_server_t::get_output()
 	return output;
 }

+struct wlr_output_state *gamescope_xwayland_server_t::get_output_state()
+{
+	return output_state;
+}
+



@@ -1392,7 +1397,8 @@ bool wlsession_init( void ) {
 	wlr_log_init(WLR_DEBUG, handle_wlr_log);

 	wlserver.display = wl_display_create();
-	wlserver.wlr.headless_backend = wlr_headless_backend_create( wlserver.display );
+	wlserver.event_loop = wl_display_get_event_loop( wlserver.display );
+	wlserver.wlr.headless_backend = wlr_headless_backend_create( wlserver.event_loop );

 	wl_display_set_global_filter(wlserver.display, filter_global, nullptr);

@@ -1405,7 +1411,7 @@ bool wlsession_init( void ) {
 	if ( !GetBackend()->IsSessionBased() )
 		return true;

-	wlserver.wlr.session = wlr_session_create( wlserver.display );
+	wlserver.wlr.session = wlr_session_create( wlserver.event_loop );
 	if ( wlserver.wlr.session == nullptr )
 	{
 		wl_log.errorf( "Failed to create session" );
@@ -1477,6 +1483,9 @@ gamescope_xwayland_server_t::gamescope_xwayland_server_t(wl_display *display)
 	wl_signal_add(&xwayland_server->events.ready, &xwayland_ready_listener);

 	output = wlr_headless_add_output(wlserver.wlr.headless_backend, 1280, 720);
+	output_state = new wlr_output_state;
+	wlr_output_state_init(output_state);
+
 	output->make = strdup("gamescope");  // freed by wlroots
 	output->model = strdup("gamescope"); // freed by wlroots
 	wlr_output_set_name(output, "gamescope");
@@ -1486,9 +1495,9 @@ gamescope_xwayland_server_t::gamescope_xwayland_server_t(wl_display *display)
 		refresh = g_nOutputRefresh;
 	}

-	wlr_output_enable(output, true);
-	wlr_output_set_custom_mode(output, g_nNestedWidth, g_nNestedHeight, refresh * 1000);
-	if (!wlr_output_commit(output))
+	wlr_output_state_set_enabled(output_state, true);
+	wlr_output_state_set_custom_mode(output_state, g_nNestedWidth, g_nNestedHeight, refresh * 1000);
+	if (!wlr_output_commit_state(output, output_state))
 	{
 		wl_log.errorf("Failed to commit headless output");
 		abort();
@@ -1496,7 +1505,7 @@ gamescope_xwayland_server_t::gamescope_xwayland_server_t(wl_display *display)

 	update_output_info();

-	wlr_output_create_global(output);
+	wlr_output_create_global(output, wlserver.display);
 }

 gamescope_xwayland_server_t::~gamescope_xwayland_server_t()
@@ -1513,6 +1522,7 @@ gamescope_xwayland_server_t::~gamescope_xwayland_server_t()
 	xwayland_server = nullptr;

 	wlr_output_destroy(output);
+	delete output_state;
 }

 void gamescope_xwayland_server_t::update_output_info()
@@ -1641,9 +1651,7 @@ bool wlserver_init( void ) {

 	wl_list_init(&pending_surfaces);

-	wlserver.event_loop = wl_display_get_event_loop(wlserver.display);
-
-	wlserver.wlr.multi_backend = wlr_multi_backend_create(wlserver.display);
+	wlserver.wlr.multi_backend = wlr_multi_backend_create( wlserver.event_loop );
 	wlr_multi_backend_add( wlserver.wlr.multi_backend, wlserver.wlr.headless_backend );

 	assert( wlserver.event_loop && wlserver.wlr.multi_backend );
@@ -1653,7 +1661,7 @@ bool wlserver_init( void ) {
 	if ( GetBackend()->IsSessionBased() )
 	{
 #if HAVE_DRM
-		wlserver.wlr.libinput_backend = wlr_libinput_backend_create( wlserver.display, wlserver.wlr.session );
+		wlserver.wlr.libinput_backend = wlr_libinput_backend_create( wlserver.wlr.session );
 		if ( wlserver.wlr.libinput_backend == NULL)
 		{
 			return false;
@@ -1992,7 +2000,7 @@ void wlserver_mousebutton( int button, bool press, uint32_t time )
 {
 	assert( wlserver_is_lock_held() );

-	wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, press ? WLR_BUTTON_PRESSED : WLR_BUTTON_RELEASED );
+	wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, press ? WL_POINTER_BUTTON_STATE_PRESSED : WL_POINTER_BUTTON_STATE_RELEASED );
 	wlr_seat_pointer_notify_frame( wlserver.wlr.seat );
 }

@@ -2000,8 +2008,8 @@ void wlserver_mousewheel( double flX, double flY, uint32_t time )
 {
 	assert( wlserver_is_lock_held() );

-	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, time, WLR_AXIS_ORIENTATION_HORIZONTAL, flX, flX * WLR_POINTER_AXIS_DISCRETE_STEP, WLR_AXIS_SOURCE_WHEEL );
-	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, time, WLR_AXIS_ORIENTATION_VERTICAL, flY, flY * WLR_POINTER_AXIS_DISCRETE_STEP, WLR_AXIS_SOURCE_WHEEL );
+	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, time, WL_POINTER_AXIS_HORIZONTAL_SCROLL, flX, flX * WLR_POINTER_AXIS_DISCRETE_STEP, WL_POINTER_AXIS_SOURCE_WHEEL, WL_POINTER_AXIS_RELATIVE_DIRECTION_IDENTICAL );
+	wlr_seat_pointer_notify_axis( wlserver.wlr.seat, time, WL_POINTER_AXIS_VERTICAL_SCROLL, flY, flY * WLR_POINTER_AXIS_DISCRETE_STEP, WL_POINTER_AXIS_SOURCE_WHEEL, WL_POINTER_AXIS_RELATIVE_DIRECTION_IDENTICAL );
 	wlr_seat_pointer_notify_frame( wlserver.wlr.seat );
 }

@@ -2184,7 +2192,7 @@ void wlserver_touchdown( double x, double y, int touch_id, uint32_t time )

 			if ( button != 0 && eMode < WLSERVER_BUTTON_COUNT )
 			{
-				wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, WLR_BUTTON_PRESSED );
+				wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, WL_POINTER_BUTTON_STATE_PRESSED );
 				wlr_seat_pointer_notify_frame( wlserver.wlr.seat );

 				wlserver.button_held[ eMode ] = true;
@@ -2210,7 +2218,7 @@ void wlserver_touchup( int touch_id, uint32_t time )

 				if ( button != 0 )
 				{
-					wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, WLR_BUTTON_RELEASED );
+					wlr_seat_pointer_notify_button( wlserver.wlr.seat, time, button, WL_POINTER_BUTTON_STATE_RELEASED );
 					bReleasedAny = true;
 				}

@@ -2412,8 +2420,9 @@ void wlserver_set_xwayland_server_mode( size_t idx, int w, int h, int refresh )
 		return;

 	struct wlr_output *output = server->get_output();
-	wlr_output_set_custom_mode(output, w, h, refresh * 1000);
-	if (!wlr_output_commit(output))
+	struct wlr_output_state *output_state = server->get_output_state();
+	wlr_output_state_set_custom_mode(output_state, w, h, refresh * 1000);
+	if (!wlr_output_commit_state(output, output_state))
 	{
 		wl_log.errorf("Failed to commit headless output");
 		abort();
diff --git a/src/wlserver.hpp b/src/wlserver.hpp
index b5ef9dac2..ed1041257 100644
--- a/src/wlserver.hpp
+++ b/src/wlserver.hpp
@@ -79,6 +79,7 @@ class gamescope_xwayland_server_t

 	struct wl_client *get_client();
 	struct wlr_output *get_output();
+	struct wlr_output_state *get_output_state();

 	void update_output_info();

@@ -86,7 +87,8 @@ class gamescope_xwayland_server_t
 	struct wlr_xwayland_server *xwayland_server = NULL;
 	struct wl_listener xwayland_ready_listener = { .notify = xwayland_ready_callback };

-	struct wlr_output *output;
+	struct wlr_output *output = nullptr;
+	struct wlr_output_state *output_state = nullptr;

 	std::map<uint32_t, wlserver_content_override *> content_overrides;


From 06ee10b64050381bb80a37078ece06260d6b7898 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Wed, 20 Mar 2024 18:23:05 +0000
Subject: [PATCH 2/2] wlserver, steamcompmgr: Support for explicit sync

---
 src/steamcompmgr.cpp | 46 +++++++++++++++++++-----
 src/wlserver.cpp     | 84 ++++++++++++++++++++++++++++++++++++++++++++
 src/wlserver.hpp     | 18 ++++++++++
 3 files changed, 139 insertions(+), 9 deletions(-)

diff --git a/src/steamcompmgr.cpp b/src/steamcompmgr.cpp
index 97c038698..00c3f03fb 100644
--- a/src/steamcompmgr.cpp
+++ b/src/steamcompmgr.cpp
@@ -713,6 +713,8 @@ struct commit_t : public gamescope::IWaitable
 			// presentation_feedbacks cleared by wlserver_presentation_feedback_discard
 		}
 		wlr_buffer_unlock( buf );
+		if ( m_oReleasePoint )
+			m_oReleasePoint->Release();
 		wlserver_unlock();
     }

@@ -825,10 +827,16 @@ struct commit_t : public gamescope::IWaitable
 		m_pDoneCommits = pDoneCommits;
 	}

+	void SetReleasePoint( const std::optional<GamescopeTimelinePoint>& oReleasePoint )
+	{
+		m_oReleasePoint = oReleasePoint;
+	}
+
 	std::mutex m_WaitableCommitStateMutex;
 	int m_nCommitFence = -1;
 	bool m_bMangoNudge = false;
 	CommitDoneList_t *m_pDoneCommits = nullptr; // I hate this
+	std::optional<GamescopeTimelinePoint> m_oReleasePoint;
 };

 static inline void GarbageCollectWaitableCommit( std::shared_ptr<commit_t> &commit )
@@ -6439,24 +6447,44 @@ void update_wayland_res(CommitDoneList_t *doneCommits, steamcompmgr_win_t *w, Re
 	int fence = -1;
 	if ( newCommit )
 	{
-		struct wlr_dmabuf_attributes dmabuf = {0};
-		if ( wlr_buffer_get_dmabuf( buf, &dmabuf ) )
+		// Whether or not to nudge mango app when this commit is done.
+		const bool mango_nudge = ( w == global_focus.focusWindow && !w->isSteamStreamingClient ) ||
+									( global_focus.focusWindow && global_focus.focusWindow->isSteamStreamingClient && w->isSteamStreamingClientVideo );
+
+		bool bKnownReady = false;
+		if ( reslistentry.oAcquireState )
 		{
-			fence = dup( dmabuf.fd[0] );
+			if ( reslistentry.oAcquireState->bKnownReady )
+			{
+				fence = -1;
+				bKnownReady = true;
+			}
+			else
+			{
+				fence = reslistentry.oAcquireState->nEventFd;
+			}
 		}
 		else
 		{
-			fence = newCommit->vulkanTex->memoryFence();
+			struct wlr_dmabuf_attributes dmabuf = {0};
+			if ( wlr_buffer_get_dmabuf( buf, &dmabuf ) )
+			{
+				fence = dup( dmabuf.fd[0] );
+			}
+			else
+			{
+				fence = newCommit->vulkanTex->memoryFence();
+			}
 		}

-		// Whether or not to nudge mango app when this commit is done.
-		const bool mango_nudge = ( w == global_focus.focusWindow && !w->isSteamStreamingClient ) ||
-									( global_focus.focusWindow && global_focus.focusWindow->isSteamStreamingClient && w->isSteamStreamingClientVideo );
-
 		gpuvis_trace_printf( "pushing wait for commit %lu win %lx", newCommit->commitID, w->type == steamcompmgr_win_type_t::XWAYLAND ? w->xwayland().id : 0 );
 		{
 			newCommit->SetFence( fence, mango_nudge, doneCommits );
-			g_ImageWaiter.AddWaitable( newCommit.get() );
+			newCommit->SetReleasePoint( reslistentry.oReleasePoint );
+			if ( bKnownReady )
+				newCommit->OnPollIn();
+			else
+				g_ImageWaiter.AddWaitable( newCommit.get() );
 		}

 		w->commit_queue.push_back( std::move(newCommit) );
diff --git a/src/wlserver.cpp b/src/wlserver.cpp
index f932a792f..7909253aa 100644
--- a/src/wlserver.cpp
+++ b/src/wlserver.cpp
@@ -8,6 +8,8 @@
 #include <string.h>
 #include <poll.h>
 #include <fcntl.h>
+#include <xf86drm.h>
+#include <sys/eventfd.h>

 #include <linux/input-event-codes.h>

@@ -23,6 +25,7 @@
 #include <wlr/backend/multi.h>
 #include <wlr/interfaces/wlr_keyboard.h>
 #include <wlr/render/wlr_renderer.h>
+#include <wlr/render/timeline.h>
 #include <wlr/types/wlr_compositor.h>
 #include <wlr/types/wlr_keyboard.h>
 #include <wlr/types/wlr_pointer.h>
@@ -32,6 +35,7 @@
 #include <wlr/xwayland/server.h>
 #include <wlr/types/wlr_xdg_shell.h>
 #include <wlr/types/wlr_relative_pointer_v1.h>
+#include <wlr/types/wlr_linux_drm_syncobj_v1.h>
 #include "wlr_end.hpp"

 #include "gamescope-xwayland-protocol.h"
@@ -95,6 +99,56 @@ std::vector<ResListEntry_t>& gamescope_xwayland_server_t::retrieve_commits()
 	return commits;
 }

+void GamescopeTimelinePoint::Release()
+{
+	assert( wlserver_is_lock_held() );
+
+	drmSyncobjTimelineSignal( pTimeline->drm_fd, &pTimeline->handle, &ulPoint, 1 );
+	wlr_render_timeline_unref( pTimeline );
+}
+
+static std::optional<GamesopeAcquireTimelineState> TimelinePointToEventFd( const GamescopeTimelinePoint &point )
+{
+	uint32_t uSignalledPoint = 0;
+	int nRet = drmSyncobjWait( point.pTimeline->drm_fd, &point.pTimeline->handle, 1, 0, DRM_SYNCOBJ_WAIT_FLAGS_WAIT_FOR_SUBMIT, &uSignalledPoint );
+	if ( nRet != 0 && nRet != -ETIME )
+	{
+		wl_log.errorf( "Failed to test if explicit sync object was submitted" );
+		return std::nullopt;
+	}
+
+	if ( uSignalledPoint >= point.ulPoint )
+	{
+		return GamesopeAcquireTimelineState{ -1, true };
+	}
+	else
+	{
+		int32_t nExplicitSyncEventFd = eventfd( 0, EFD_CLOEXEC );
+		if ( nExplicitSyncEventFd < 0 )
+		{
+			wl_log.errorf( "Failed to create eventfd" );
+			return std::nullopt;
+		}
+
+		drm_syncobj_eventfd syncobjEventFd =
+		{
+			.handle = point.pTimeline->handle,
+			.flags  = DRM_SYNCOBJ_WAIT_FLAGS_WAIT_AVAILABLE,
+			.point  = point.ulPoint,
+			.fd     = nExplicitSyncEventFd,
+		};
+
+		if ( drmIoctl( point.pTimeline->drm_fd, DRM_IOCTL_SYNCOBJ_EVENTFD, &syncobjEventFd ) != 0 )
+		{
+			wl_log.errorf( "DRM_IOCTL_SYNCOBJ_EVENTFD failed" );
+			close( nExplicitSyncEventFd );
+			return std::nullopt;;
+		}
+
+		return GamesopeAcquireTimelineState{ nExplicitSyncEventFd, false };
+	}
+}
+
 void gamescope_xwayland_server_t::wayland_commit(struct wlr_surface *surf, struct wlr_buffer *buf)
 {
 	{
@@ -104,6 +158,31 @@ void gamescope_xwayland_server_t::wayland_commit(struct wlr_surface *surf, struc

 		auto queue_mode = gamescope_commit_queue_v1_get_surface_mode(surf);

+		wlr_linux_drm_syncobj_surface_v1_state *pSyncState =
+			wlr_linux_drm_syncobj_v1_get_surface_state( wlserver.wlr.drm_syncobj_manager_v1, surf );
+
+		std::optional<GamesopeAcquireTimelineState> oAcquireState;
+		std::optional<GamescopeTimelinePoint> oReleasePoint;
+		if ( pSyncState )
+		{
+			GamescopeTimelinePoint acquirePoint =
+			{
+				.pTimeline = pSyncState->acquire_timeline,
+				.ulPoint   = pSyncState->acquire_point,
+			};
+			oAcquireState = TimelinePointToEventFd( acquirePoint );
+			if ( !oAcquireState )
+			{
+				return;
+			}
+
+			oReleasePoint = GamescopeTimelinePoint
+			{
+				.pTimeline = wlr_render_timeline_ref( pSyncState->release_timeline ),
+				.ulPoint   = pSyncState->release_point,
+			};
+		}
+
 		ResListEntry_t newEntry = {
 			.surf = surf,
 			.buf = buf,
@@ -113,6 +192,8 @@ void gamescope_xwayland_server_t::wayland_commit(struct wlr_surface *surf, struc
 			.presentation_feedbacks = std::move(wl_surf->pending_presentation_feedbacks),
 			.present_id = wl_surf->present_id,
 			.desired_present_time = wl_surf->desired_present_time,
+			.oAcquireState = oAcquireState,
+			.oReleasePoint = oReleasePoint,
 		};
 		wl_surf->present_id = std::nullopt;
 		wl_surf->desired_present_time = 0;
@@ -1703,6 +1784,9 @@ bool wlserver_init( void ) {

 	commit_queue_manager_v1_create(wlserver.display);

+	int drm_fd = wlr_renderer_get_drm_fd( wlserver.wlr.renderer );
+	wlserver.wlr.drm_syncobj_manager_v1 = wlr_linux_drm_syncobj_manager_v1_create( wlserver.display, 1, drm_fd );
+
 	wlserver.relative_pointer_manager = wlr_relative_pointer_manager_v1_create(wlserver.display);
 	if ( !wlserver.relative_pointer_manager )
 	{
diff --git a/src/wlserver.hpp b/src/wlserver.hpp
index ed1041257..2551ac175 100644
--- a/src/wlserver.hpp
+++ b/src/wlserver.hpp
@@ -38,6 +38,21 @@ struct wlserver_vk_swapchain_feedback
 	std::shared_ptr<gamescope::BackendBlob> hdr_metadata_blob;
 };

+
+struct GamescopeTimelinePoint
+{
+	struct wlr_render_timeline *pTimeline = nullptr;
+	uint64_t ulPoint = 0;
+
+	void Release();
+};
+
+struct GamesopeAcquireTimelineState
+{
+	int32_t nEventFd = -1;
+	bool bKnownReady = false;
+};
+
 struct ResListEntry_t {
 	struct wlr_surface *surf;
 	struct wlr_buffer *buf;
@@ -47,6 +62,8 @@ struct ResListEntry_t {
 	std::vector<struct wl_resource*> presentation_feedbacks;
 	std::optional<uint32_t> present_id;
 	uint64_t desired_present_time;
+	std::optional<GamesopeAcquireTimelineState> oAcquireState;
+	std::optional<GamescopeTimelinePoint> oReleasePoint;
 };

 struct wlserver_content_override;
@@ -113,6 +130,7 @@ struct wlserver_t {
 		struct wlr_compositor *compositor;
 		struct wlr_session *session;
 		struct wlr_seat *seat;
+		struct wlr_linux_drm_syncobj_manager_v1 *drm_syncobj_manager_v1;

 		// Used to simulate key events and set the keymap
 		struct wlr_keyboard *virtual_keyboard_device;
