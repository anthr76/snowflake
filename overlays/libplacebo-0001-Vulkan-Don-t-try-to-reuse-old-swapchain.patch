diff --git a/src/vulkan/swapchain.c b/src/vulkan/swapchain.c
index 0741fbfc..88bdf6a5 100644
--- a/src/vulkan/swapchain.c
+++ b/src/vulkan/swapchain.c
@@ -610,13 +610,21 @@ static bool vk_sw_recreate(pl_swapchain sw, int w, int h)
     }
 #endif

+    {
+        pl_gpu_flush(gpu);
+        vk_wait_idle(vk);
+        for (int i = 0; i < vk->pool_graphics->num_queues; i++)
+            vk->QueueWaitIdle(vk->pool_graphics->queues[i]);
+        vk->DestroySwapchainKHR(vk->dev, p->swapchain, PL_VK_ALLOC);
+    }
+
     // Calling `vkCreateSwapchainKHR` puts sinfo.oldSwapchain into a retired
     // state whether the call succeeds or not, so we always need to garbage
     // collect it afterwards - asynchronously as it may still be in use
-    sinfo.oldSwapchain = p->swapchain;
+    /* sinfo.oldSwapchain = p->swapchain; */
     p->swapchain = VK_NULL_HANDLE;
     VkResult res = vk->CreateSwapchainKHR(vk->dev, &sinfo, PL_VK_ALLOC, &p->swapchain);
-    vk_dev_callback(vk, (vk_cb) destroy_swapchain, vk, vk_wrap_handle(sinfo.oldSwapchain));
+    /* vk_dev_callback(vk, (vk_cb) destroy_swapchain, vk, vk_wrap_handle(sinfo.oldSwapchain)); */
     PL_VK_ASSERT(res, "vk->CreateSwapchainKHR(...)");

     // Get the new swapchain images
